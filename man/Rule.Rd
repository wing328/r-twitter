% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rule.R
\docType{class}
\name{Rule}
\alias{Rule}
\title{Rule}
\format{
An \code{R6Class} generator object
}
\description{
Rule Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{character [optional]}

\item{\code{tag}}{character [optional]}

\item{\code{value}}{character}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Rule-new}{\code{Rule$new()}}
\item \href{#method-Rule-toJSON}{\code{Rule$toJSON()}}
\item \href{#method-Rule-fromJSON}{\code{Rule$fromJSON()}}
\item \href{#method-Rule-toJSONString}{\code{Rule$toJSONString()}}
\item \href{#method-Rule-fromJSONString}{\code{Rule$fromJSONString()}}
\item \href{#method-Rule-validateJSON}{\code{Rule$validateJSON()}}
\item \href{#method-Rule-toString}{\code{Rule$toString()}}
\item \href{#method-Rule-isValid}{\code{Rule$isValid()}}
\item \href{#method-Rule-getInvalidFields}{\code{Rule$getInvalidFields()}}
\item \href{#method-Rule-clone}{\code{Rule$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-new"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Rule class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$new(value, id = NULL, tag = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The filterlang value of the rule.}

\item{\code{id}}{Unique identifier of this rule.}

\item{\code{tag}}{A tag meant for the labeling of user provided rules.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Rule in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Rule
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Rule
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Rule in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Rule
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Rule
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Rule and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Rule
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Rule-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Rule-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Rule$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
