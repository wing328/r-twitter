% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/problem.R
\docType{class}
\name{Problem}
\alias{Problem}
\title{Problem}
\format{
An \code{R6Class} generator object
}
\description{
Problem Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{detail}}{character [optional]}

\item{\code{status}}{integer [optional]}

\item{\code{title}}{character}

\item{\code{type}}{character}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Problem-new}{\code{Problem$new()}}
\item \href{#method-Problem-toJSON}{\code{Problem$toJSON()}}
\item \href{#method-Problem-fromJSON}{\code{Problem$fromJSON()}}
\item \href{#method-Problem-toJSONString}{\code{Problem$toJSONString()}}
\item \href{#method-Problem-fromJSONString}{\code{Problem$fromJSONString()}}
\item \href{#method-Problem-validateJSON}{\code{Problem$validateJSON()}}
\item \href{#method-Problem-toString}{\code{Problem$toString()}}
\item \href{#method-Problem-isValid}{\code{Problem$isValid()}}
\item \href{#method-Problem-getInvalidFields}{\code{Problem$getInvalidFields()}}
\item \href{#method-Problem-clone}{\code{Problem$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-new"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Problem class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$new(title, type, detail = NULL, status = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{title}}{title}

\item{\code{type}}{type}

\item{\code{detail}}{detail}

\item{\code{status}}{status}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Problem in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Problem
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Problem
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Problem in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Problem
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Problem
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Problem and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Problem
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Problem-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Problem-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Problem$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
