% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/context_annotation_domain_fields.R
\docType{class}
\name{ContextAnnotationDomainFields}
\alias{ContextAnnotationDomainFields}
\title{ContextAnnotationDomainFields}
\format{
An \code{R6Class} generator object
}
\description{
ContextAnnotationDomainFields Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{description}}{character [optional]}

\item{\code{id}}{character}

\item{\code{name}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ContextAnnotationDomainFields-new}{\code{ContextAnnotationDomainFields$new()}}
\item \href{#method-ContextAnnotationDomainFields-toJSON}{\code{ContextAnnotationDomainFields$toJSON()}}
\item \href{#method-ContextAnnotationDomainFields-fromJSON}{\code{ContextAnnotationDomainFields$fromJSON()}}
\item \href{#method-ContextAnnotationDomainFields-toJSONString}{\code{ContextAnnotationDomainFields$toJSONString()}}
\item \href{#method-ContextAnnotationDomainFields-fromJSONString}{\code{ContextAnnotationDomainFields$fromJSONString()}}
\item \href{#method-ContextAnnotationDomainFields-validateJSON}{\code{ContextAnnotationDomainFields$validateJSON()}}
\item \href{#method-ContextAnnotationDomainFields-toString}{\code{ContextAnnotationDomainFields$toString()}}
\item \href{#method-ContextAnnotationDomainFields-isValid}{\code{ContextAnnotationDomainFields$isValid()}}
\item \href{#method-ContextAnnotationDomainFields-getInvalidFields}{\code{ContextAnnotationDomainFields$getInvalidFields()}}
\item \href{#method-ContextAnnotationDomainFields-clone}{\code{ContextAnnotationDomainFields$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-new"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ContextAnnotationDomainFields class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$new(id, description = NULL, name = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The unique id for a context annotation domain.}

\item{\code{description}}{Description of the context annotation domain.}

\item{\code{name}}{Name of the context annotation domain.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ContextAnnotationDomainFields in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of ContextAnnotationDomainFields
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ContextAnnotationDomainFields
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ContextAnnotationDomainFields in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of ContextAnnotationDomainFields
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ContextAnnotationDomainFields
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to ContextAnnotationDomainFields and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-toString"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of ContextAnnotationDomainFields
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ContextAnnotationDomainFields-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ContextAnnotationDomainFields-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ContextAnnotationDomainFields$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
