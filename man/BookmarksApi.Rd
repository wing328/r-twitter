% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bookmarks_api.R
\docType{class}
\name{BookmarksApi}
\alias{BookmarksApi}
\title{Bookmarks operations}
\format{
An \code{R6Class} generator object
}
\description{
twitter.Bookmarks
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ get_users_id_bookmarks } \emph{ Bookmarks by User }
Returns Tweet objects that have been bookmarked by the requesting User

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @param } expansions Enum < [attachments.media_keys, attachments.poll_ids, author_id, entities.mentions.username, geo.place_id, in_reply_to_user_id, referenced_tweets.id, referenced_tweets.id.author_id] >
\item \emph{ @param } media_fields Enum < [alt_text, duration_ms, height, media_key, non_public_metrics, organic_metrics, preview_image_url, promoted_metrics, public_metrics, type, url, variants, width] >
\item \emph{ @param } poll_fields Enum < [duration_minutes, end_datetime, id, options, voting_status] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } place_fields Enum < [contained_within, country, country_code, full_name, geo, id, name, place_type] >
\item \emph{ @returnType } \link{Get2UsersIdBookmarksResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdBookmarksResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ post_users_id_bookmarks } \emph{ Add Tweet to Bookmarks }
Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } bookmark_add_request \link{BookmarkAddRequest}
\item \emph{ @returnType } \link{BookmarkMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : BookmarkMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_bookmarks_delete } \emph{ Remove a bookmarked Tweet }
Removes a Tweet from the requesting User's bookmarked Tweets.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } tweet_id character
\item \emph{ @returnType } \link{BookmarkMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : BookmarkMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  get_users_id_bookmarks  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to return results.
var.max_results <- 56 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get the next 'page' of results.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.
var.expansions <- ["[\"attachments.media_keys\",\"attachments.poll_ids\",\"author_id\",\"entities.mentions.username\",\"geo.place_id\",\"in_reply_to_user_id\",\"referenced_tweets.id\",\"referenced_tweets.id.author_id\"]"] # set[character] | A comma separated list of fields to expand.
var.media_fields <- ["[\"alt_text\",\"duration_ms\",\"height\",\"media_key\",\"non_public_metrics\",\"organic_metrics\",\"preview_image_url\",\"promoted_metrics\",\"public_metrics\",\"type\",\"url\",\"variants\",\"width\"]"] # set[character] | A comma separated list of Media fields to display.
var.poll_fields <- ["[\"duration_minutes\",\"end_datetime\",\"id\",\"options\",\"voting_status\"]"] # set[character] | A comma separated list of Poll fields to display.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.place_fields <- ["[\"contained_within\",\"country\",\"country_code\",\"full_name\",\"geo\",\"id\",\"name\",\"place_type\"]"] # set[character] | A comma separated list of Place fields to display.

#Bookmarks by User
api.instance <- BookmarksApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$get_users_id_bookmarks(var.id, max_results=var.max_results, pagination_token=var.pagination_token, tweet_fields=var.tweet_fields, expansions=var.expansions, media_fields=var.media_fields, poll_fields=var.poll_fields, user_fields=var.user_fields, place_fields=var.place_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  post_users_id_bookmarks  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to add bookmarks.
var.bookmark_add_request <- BookmarkAddRequest$new() # BookmarkAddRequest | 

#Add Tweet to Bookmarks
api.instance <- BookmarksApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$post_users_id_bookmarks(var.id, var.bookmark_add_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_bookmarks_delete  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User whose bookmark is to be removed.
var.tweet_id <- "tweet_id_example" # character | The ID of the Tweet that the source User is removing from bookmarks.

#Remove a bookmarked Tweet
api.instance <- BookmarksApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$users_id_bookmarks_delete(var.id, var.tweet_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BookmarksApi-new}{\code{BookmarksApi$new()}}
\item \href{#method-BookmarksApi-get_users_id_bookmarks}{\code{BookmarksApi$get_users_id_bookmarks()}}
\item \href{#method-BookmarksApi-get_users_id_bookmarks_with_http_info}{\code{BookmarksApi$get_users_id_bookmarks_with_http_info()}}
\item \href{#method-BookmarksApi-post_users_id_bookmarks}{\code{BookmarksApi$post_users_id_bookmarks()}}
\item \href{#method-BookmarksApi-post_users_id_bookmarks_with_http_info}{\code{BookmarksApi$post_users_id_bookmarks_with_http_info()}}
\item \href{#method-BookmarksApi-users_id_bookmarks_delete}{\code{BookmarksApi$users_id_bookmarks_delete()}}
\item \href{#method-BookmarksApi-users_id_bookmarks_delete_with_http_info}{\code{BookmarksApi$users_id_bookmarks_delete_with_http_info()}}
\item \href{#method-BookmarksApi-clone}{\code{BookmarksApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new BookmarksApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-get_users_id_bookmarks"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-get_users_id_bookmarks}{}}}
\subsection{Method \code{get_users_id_bookmarks()}}{
Bookmarks by User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$get_users_id_bookmarks(
  id,
  max_results = NULL,
  pagination_token = NULL,
  tweet_fields = NULL,
  expansions = NULL,
  media_fields = NULL,
  poll_fields = NULL,
  user_fields = NULL,
  place_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{media_fields}}{(optional) A comma separated list of Media fields to display.}

\item{\code{poll_fields}}{(optional) A comma separated list of Poll fields to display.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{place_fields}}{(optional) A comma separated list of Place fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdBookmarksResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-get_users_id_bookmarks_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-get_users_id_bookmarks_with_http_info}{}}}
\subsection{Method \code{get_users_id_bookmarks_with_http_info()}}{
Bookmarks by User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$get_users_id_bookmarks_with_http_info(
  id,
  max_results = NULL,
  pagination_token = NULL,
  tweet_fields = NULL,
  expansions = NULL,
  media_fields = NULL,
  poll_fields = NULL,
  user_fields = NULL,
  place_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{media_fields}}{(optional) A comma separated list of Media fields to display.}

\item{\code{poll_fields}}{(optional) A comma separated list of Poll fields to display.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{place_fields}}{(optional) A comma separated list of Place fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdBookmarksResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-post_users_id_bookmarks"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-post_users_id_bookmarks}{}}}
\subsection{Method \code{post_users_id_bookmarks()}}{
Add Tweet to Bookmarks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$post_users_id_bookmarks(
  id,
  bookmark_add_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to add bookmarks.}

\item{\code{bookmark_add_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BookmarkMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-post_users_id_bookmarks_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-post_users_id_bookmarks_with_http_info}{}}}
\subsection{Method \code{post_users_id_bookmarks_with_http_info()}}{
Add Tweet to Bookmarks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$post_users_id_bookmarks_with_http_info(
  id,
  bookmark_add_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to add bookmarks.}

\item{\code{bookmark_add_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (BookmarkMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-users_id_bookmarks_delete"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-users_id_bookmarks_delete}{}}}
\subsection{Method \code{users_id_bookmarks_delete()}}{
Remove a bookmarked Tweet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$users_id_bookmarks_delete(id, tweet_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User whose bookmark is to be removed.}

\item{\code{tweet_id}}{The ID of the Tweet that the source User is removing from bookmarks.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BookmarkMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-users_id_bookmarks_delete_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-users_id_bookmarks_delete_with_http_info}{}}}
\subsection{Method \code{users_id_bookmarks_delete_with_http_info()}}{
Remove a bookmarked Tweet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$users_id_bookmarks_delete_with_http_info(
  id,
  tweet_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User whose bookmark is to be removed.}

\item{\code{tweet_id}}{The ID of the Tweet that the source User is removing from bookmarks.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (BookmarkMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BookmarksApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BookmarksApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BookmarksApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
