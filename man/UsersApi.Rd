% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/users_api.R
\docType{class}
\name{UsersApi}
\alias{UsersApi}
\title{Users operations}
\format{
An \code{R6Class} generator object
}
\description{
twitter.Users
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ find_my_user } \emph{ User lookup me }
This endpoint returns information about the requesting User.

\itemize{
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersMeResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersMeResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_user_by_id } \emph{ User lookup by ID }
This endpoint returns information about a User. Specify User by ID.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_user_by_username } \emph{ User lookup by username }
This endpoint returns information about a User. Specify User by username.

\itemize{
\item \emph{ @param } username character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersByUsernameUsernameResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersByUsernameUsernameResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_users_by_id } \emph{ User lookup by IDs }
This endpoint returns information about Users. Specify Users by their ID.

\itemize{
\item \emph{ @param } ids list( character )
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_users_by_username } \emph{ User lookup by usernames }
This endpoint returns information about Users. Specify Users by their username.

\itemize{
\item \emph{ @param } usernames list( character )
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersByResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersByResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_get_followers } \emph{ Returns User objects that follow a List by the provided List ID }
Returns a list of Users that follow a List by the provided List ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2ListsIdFollowersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2ListsIdFollowersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_get_members } \emph{ Returns User objects that are members of a List by the provided List ID. }
Returns a list of Users that are members of a List by the provided List ID.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2ListsIdMembersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2ListsIdMembersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ tweets_id_liking_users } \emph{ Returns User objects that have liked the provided Tweet ID }
Returns a list of Users that have liked the provided Tweet ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2TweetsIdLikingUsersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2TweetsIdLikingUsersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ tweets_id_retweeting_users } \emph{ Returns User objects that have retweeted the provided Tweet ID }
Returns a list of Users that have retweeted the provided Tweet ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2TweetsIdRetweetedByResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2TweetsIdRetweetedByResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_block } \emph{ Block User by User ID }
Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } block_user_request \link{BlockUserRequest}
\item \emph{ @returnType } \link{BlockUserMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : BlockUserMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_blocking } \emph{ Returns User objects that are blocked by provided User ID }
Returns a list of Users that are blocked by the provided User ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdBlockingResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdBlockingResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_follow } \emph{ Follow User }
Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } users_following_create_request \link{UsersFollowingCreateRequest}
\item \emph{ @returnType } \link{UsersFollowingCreateResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : UsersFollowingCreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_followers } \emph{ Returns User objects that follow a List by the provided User ID }
Returns a list of Users that follow the provided User ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdFollowersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdFollowersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_following } \emph{ Following by User ID }
Returns a list of Users that are being followed by the provided User ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdFollowingResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdFollowingResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_mute } \emph{ Mute User by User ID. }
Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } mute_user_request \link{MuteUserRequest}
\item \emph{ @returnType } \link{MuteUserMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : MuteUserMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_muting } \emph{ Returns User objects that are muted by the provided User ID }
Returns a list of Users that are muted by the provided User ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdMutingResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdMutingResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_unblock } \emph{ Unblock User by User ID }
Causes the source User to unblock the target User. The source User must match the User context authorizing the request

\itemize{
\item \emph{ @param } source_user_id character
\item \emph{ @param } target_user_id character
\item \emph{ @returnType } \link{BlockUserMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : BlockUserMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_unfollow } \emph{ Unfollow User }
Causes the source User to unfollow the target User. The source User must match the User context authorizing the request

\itemize{
\item \emph{ @param } source_user_id character
\item \emph{ @param } target_user_id character
\item \emph{ @returnType } \link{UsersFollowingDeleteResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : UsersFollowingDeleteResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ users_id_unmute } \emph{ Unmute User by User ID }
Causes the source User to unmute the target User. The source User must match the User context authorizing the request

\itemize{
\item \emph{ @param } source_user_id character
\item \emph{ @param } target_user_id character
\item \emph{ @returnType } \link{MuteUserMutationResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : MuteUserMutationResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  find_my_user  ####################

library(twitter)
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#User lookup me
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$find_my_user(user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_user_by_id  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#User lookup by ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$find_user_by_id(var.id, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_user_by_username  ####################

library(twitter)
var.username <- "TwitterDev" # character | A username.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#User lookup by username
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$find_user_by_username(var.username, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_users_by_id  ####################

library(twitter)
var.ids <- ["2244994945,6253282,12"] # array[character] | A list of User IDs, comma-separated. You can specify up to 100 IDs.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#User lookup by IDs
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$find_users_by_id(var.ids, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_users_by_username  ####################

library(twitter)
var.usernames <- ["TwitterDev,TwitterAPI"] # array[character] | A list of usernames, comma-separated.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#User lookup by usernames
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$find_users_by_username(var.usernames, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_get_followers  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that follow a List by the provided List ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_get_followers(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_get_members  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that are members of a List by the provided List ID.
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_get_members(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  tweets_id_liking_users  ####################

library(twitter)
var.id <- "id_example" # character | A single Tweet ID.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get the next 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that have liked the provided Tweet ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$tweets_id_liking_users(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  tweets_id_retweeting_users  ####################

library(twitter)
var.id <- "id_example" # character | A single Tweet ID.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get the next 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that have retweeted the provided Tweet ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$tweets_id_retweeting_users(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_block  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that is requesting to block the target User.
var.block_user_request <- BlockUserRequest$new() # BlockUserRequest | 

#Block User by User ID
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_block(var.id, var.block_user_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_blocking  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to return results.
var.max_results <- 56 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that are blocked by provided User ID
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_blocking(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_follow  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that is requesting to follow the target User.
var.users_following_create_request <- UsersFollowingCreateRequest$new() # UsersFollowingCreateRequest | 

#Follow User
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_follow(var.id, users_following_create_request=var.users_following_create_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_followers  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.max_results <- 56 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that follow a List by the provided User ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_followers(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_following  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.max_results <- 56 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Following by User ID
api.instance <- UsersApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_following(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_mute  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that is requesting to mute the target User.
var.mute_user_request <- MuteUserRequest$new() # MuteUserRequest | 

#Mute User by User ID.
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_mute(var.id, mute_user_request=var.mute_user_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_muting  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to return results.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get the next 'page' of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Returns User objects that are muted by the provided User ID
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_muting(var.id, max_results=var.max_results, pagination_token=var.pagination_token, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_unblock  ####################

library(twitter)
var.source_user_id <- "source_user_id_example" # character | The ID of the authenticated source User that is requesting to unblock the target User.
var.target_user_id <- "target_user_id_example" # character | The ID of the User that the source User is requesting to unblock.

#Unblock User by User ID
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_unblock(var.source_user_id, var.target_user_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_unfollow  ####################

library(twitter)
var.source_user_id <- "source_user_id_example" # character | The ID of the authenticated source User that is requesting to unfollow the target User.
var.target_user_id <- "target_user_id_example" # character | The ID of the User that the source User is requesting to unfollow.

#Unfollow User
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_unfollow(var.source_user_id, var.target_user_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  users_id_unmute  ####################

library(twitter)
var.source_user_id <- "source_user_id_example" # character | The ID of the authenticated source User that is requesting to unmute the target User.
var.target_user_id <- "target_user_id_example" # character | The ID of the User that the source User is requesting to unmute.

#Unmute User by User ID
api.instance <- UsersApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$users_id_unmute(var.source_user_id, var.target_user_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UsersApi-new}{\code{UsersApi$new()}}
\item \href{#method-UsersApi-find_my_user}{\code{UsersApi$find_my_user()}}
\item \href{#method-UsersApi-find_my_user_with_http_info}{\code{UsersApi$find_my_user_with_http_info()}}
\item \href{#method-UsersApi-find_user_by_id}{\code{UsersApi$find_user_by_id()}}
\item \href{#method-UsersApi-find_user_by_id_with_http_info}{\code{UsersApi$find_user_by_id_with_http_info()}}
\item \href{#method-UsersApi-find_user_by_username}{\code{UsersApi$find_user_by_username()}}
\item \href{#method-UsersApi-find_user_by_username_with_http_info}{\code{UsersApi$find_user_by_username_with_http_info()}}
\item \href{#method-UsersApi-find_users_by_id}{\code{UsersApi$find_users_by_id()}}
\item \href{#method-UsersApi-find_users_by_id_with_http_info}{\code{UsersApi$find_users_by_id_with_http_info()}}
\item \href{#method-UsersApi-find_users_by_username}{\code{UsersApi$find_users_by_username()}}
\item \href{#method-UsersApi-find_users_by_username_with_http_info}{\code{UsersApi$find_users_by_username_with_http_info()}}
\item \href{#method-UsersApi-list_get_followers}{\code{UsersApi$list_get_followers()}}
\item \href{#method-UsersApi-list_get_followers_with_http_info}{\code{UsersApi$list_get_followers_with_http_info()}}
\item \href{#method-UsersApi-list_get_members}{\code{UsersApi$list_get_members()}}
\item \href{#method-UsersApi-list_get_members_with_http_info}{\code{UsersApi$list_get_members_with_http_info()}}
\item \href{#method-UsersApi-tweets_id_liking_users}{\code{UsersApi$tweets_id_liking_users()}}
\item \href{#method-UsersApi-tweets_id_liking_users_with_http_info}{\code{UsersApi$tweets_id_liking_users_with_http_info()}}
\item \href{#method-UsersApi-tweets_id_retweeting_users}{\code{UsersApi$tweets_id_retweeting_users()}}
\item \href{#method-UsersApi-tweets_id_retweeting_users_with_http_info}{\code{UsersApi$tweets_id_retweeting_users_with_http_info()}}
\item \href{#method-UsersApi-users_id_block}{\code{UsersApi$users_id_block()}}
\item \href{#method-UsersApi-users_id_block_with_http_info}{\code{UsersApi$users_id_block_with_http_info()}}
\item \href{#method-UsersApi-users_id_blocking}{\code{UsersApi$users_id_blocking()}}
\item \href{#method-UsersApi-users_id_blocking_with_http_info}{\code{UsersApi$users_id_blocking_with_http_info()}}
\item \href{#method-UsersApi-users_id_follow}{\code{UsersApi$users_id_follow()}}
\item \href{#method-UsersApi-users_id_follow_with_http_info}{\code{UsersApi$users_id_follow_with_http_info()}}
\item \href{#method-UsersApi-users_id_followers}{\code{UsersApi$users_id_followers()}}
\item \href{#method-UsersApi-users_id_followers_with_http_info}{\code{UsersApi$users_id_followers_with_http_info()}}
\item \href{#method-UsersApi-users_id_following}{\code{UsersApi$users_id_following()}}
\item \href{#method-UsersApi-users_id_following_with_http_info}{\code{UsersApi$users_id_following_with_http_info()}}
\item \href{#method-UsersApi-users_id_mute}{\code{UsersApi$users_id_mute()}}
\item \href{#method-UsersApi-users_id_mute_with_http_info}{\code{UsersApi$users_id_mute_with_http_info()}}
\item \href{#method-UsersApi-users_id_muting}{\code{UsersApi$users_id_muting()}}
\item \href{#method-UsersApi-users_id_muting_with_http_info}{\code{UsersApi$users_id_muting_with_http_info()}}
\item \href{#method-UsersApi-users_id_unblock}{\code{UsersApi$users_id_unblock()}}
\item \href{#method-UsersApi-users_id_unblock_with_http_info}{\code{UsersApi$users_id_unblock_with_http_info()}}
\item \href{#method-UsersApi-users_id_unfollow}{\code{UsersApi$users_id_unfollow()}}
\item \href{#method-UsersApi-users_id_unfollow_with_http_info}{\code{UsersApi$users_id_unfollow_with_http_info()}}
\item \href{#method-UsersApi-users_id_unmute}{\code{UsersApi$users_id_unmute()}}
\item \href{#method-UsersApi-users_id_unmute_with_http_info}{\code{UsersApi$users_id_unmute_with_http_info()}}
\item \href{#method-UsersApi-clone}{\code{UsersApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new UsersApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_my_user"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_my_user}{}}}
\subsection{Method \code{find_my_user()}}{
User lookup me
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_my_user(
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersMeResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_my_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_my_user_with_http_info}{}}}
\subsection{Method \code{find_my_user_with_http_info()}}{
User lookup me
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_my_user_with_http_info(
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersMeResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_user_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_user_by_id}{}}}
\subsection{Method \code{find_user_by_id()}}{
User lookup by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_user_by_id(
  id,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_user_by_id_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_user_by_id_with_http_info}{}}}
\subsection{Method \code{find_user_by_id_with_http_info()}}{
User lookup by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_user_by_id_with_http_info(
  id,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_user_by_username"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_user_by_username}{}}}
\subsection{Method \code{find_user_by_username()}}{
User lookup by username
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_user_by_username(
  username,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{A username.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersByUsernameUsernameResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_user_by_username_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_user_by_username_with_http_info}{}}}
\subsection{Method \code{find_user_by_username_with_http_info()}}{
User lookup by username
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_user_by_username_with_http_info(
  username,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{A username.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersByUsernameUsernameResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_users_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_users_by_id}{}}}
\subsection{Method \code{find_users_by_id()}}{
User lookup by IDs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_users_by_id(
  ids,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ids}}{A list of User IDs, comma-separated. You can specify up to 100 IDs.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_users_by_id_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_users_by_id_with_http_info}{}}}
\subsection{Method \code{find_users_by_id_with_http_info()}}{
User lookup by IDs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_users_by_id_with_http_info(
  ids,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ids}}{A list of User IDs, comma-separated. You can specify up to 100 IDs.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_users_by_username"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_users_by_username}{}}}
\subsection{Method \code{find_users_by_username()}}{
User lookup by usernames
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_users_by_username(
  usernames,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{usernames}}{A list of usernames, comma-separated.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersByResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-find_users_by_username_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-find_users_by_username_with_http_info}{}}}
\subsection{Method \code{find_users_by_username_with_http_info()}}{
User lookup by usernames
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$find_users_by_username_with_http_info(
  usernames,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{usernames}}{A list of usernames, comma-separated.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersByResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-list_get_followers"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-list_get_followers}{}}}
\subsection{Method \code{list_get_followers()}}{
Returns User objects that follow a List by the provided List ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$list_get_followers(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2ListsIdFollowersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-list_get_followers_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-list_get_followers_with_http_info}{}}}
\subsection{Method \code{list_get_followers_with_http_info()}}{
Returns User objects that follow a List by the provided List ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$list_get_followers_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2ListsIdFollowersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-list_get_members"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-list_get_members}{}}}
\subsection{Method \code{list_get_members()}}{
Returns User objects that are members of a List by the provided List ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$list_get_members(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2ListsIdMembersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-list_get_members_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-list_get_members_with_http_info}{}}}
\subsection{Method \code{list_get_members_with_http_info()}}{
Returns User objects that are members of a List by the provided List ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$list_get_members_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2ListsIdMembersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-tweets_id_liking_users"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-tweets_id_liking_users}{}}}
\subsection{Method \code{tweets_id_liking_users()}}{
Returns User objects that have liked the provided Tweet ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$tweets_id_liking_users(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A single Tweet ID.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2TweetsIdLikingUsersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-tweets_id_liking_users_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-tweets_id_liking_users_with_http_info}{}}}
\subsection{Method \code{tweets_id_liking_users_with_http_info()}}{
Returns User objects that have liked the provided Tweet ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$tweets_id_liking_users_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A single Tweet ID.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2TweetsIdLikingUsersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-tweets_id_retweeting_users"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-tweets_id_retweeting_users}{}}}
\subsection{Method \code{tweets_id_retweeting_users()}}{
Returns User objects that have retweeted the provided Tweet ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$tweets_id_retweeting_users(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A single Tweet ID.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2TweetsIdRetweetedByResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-tweets_id_retweeting_users_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-tweets_id_retweeting_users_with_http_info}{}}}
\subsection{Method \code{tweets_id_retweeting_users_with_http_info()}}{
Returns User objects that have retweeted the provided Tweet ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$tweets_id_retweeting_users_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A single Tweet ID.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2TweetsIdRetweetedByResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_block"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_block}{}}}
\subsection{Method \code{users_id_block()}}{
Block User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_block(id, block_user_request, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to block the target User.}

\item{\code{block_user_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BlockUserMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_block_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_block_with_http_info}{}}}
\subsection{Method \code{users_id_block_with_http_info()}}{
Block User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_block_with_http_info(
  id,
  block_user_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to block the target User.}

\item{\code{block_user_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (BlockUserMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_blocking"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_blocking}{}}}
\subsection{Method \code{users_id_blocking()}}{
Returns User objects that are blocked by provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_blocking(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdBlockingResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_blocking_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_blocking_with_http_info}{}}}
\subsection{Method \code{users_id_blocking_with_http_info()}}{
Returns User objects that are blocked by provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_blocking_with_http_info(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdBlockingResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_follow"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_follow}{}}}
\subsection{Method \code{users_id_follow()}}{
Follow User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_follow(
  id,
  users_following_create_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to follow the target User.}

\item{\code{users_following_create_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
UsersFollowingCreateResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_follow_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_follow_with_http_info}{}}}
\subsection{Method \code{users_id_follow_with_http_info()}}{
Follow User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_follow_with_http_info(
  id,
  users_following_create_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to follow the target User.}

\item{\code{users_following_create_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (UsersFollowingCreateResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_followers"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_followers}{}}}
\subsection{Method \code{users_id_followers()}}{
Returns User objects that follow a List by the provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_followers(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdFollowersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_followers_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_followers_with_http_info}{}}}
\subsection{Method \code{users_id_followers_with_http_info()}}{
Returns User objects that follow a List by the provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_followers_with_http_info(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdFollowersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_following"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_following}{}}}
\subsection{Method \code{users_id_following()}}{
Following by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_following(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdFollowingResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_following_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_following_with_http_info}{}}}
\subsection{Method \code{users_id_following_with_http_info()}}{
Following by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_following_with_http_info(
  id,
  max_results = NULL,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdFollowingResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_mute"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_mute}{}}}
\subsection{Method \code{users_id_mute()}}{
Mute User by User ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_mute(id, mute_user_request = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to mute the target User.}

\item{\code{mute_user_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
MuteUserMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_mute_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_mute_with_http_info}{}}}
\subsection{Method \code{users_id_mute_with_http_info()}}{
Mute User by User ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_mute_with_http_info(
  id,
  mute_user_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that is requesting to mute the target User.}

\item{\code{mute_user_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (MuteUserMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_muting"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_muting}{}}}
\subsection{Method \code{users_id_muting()}}{
Returns User objects that are muted by the provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_muting(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdMutingResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_muting_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_muting_with_http_info}{}}}
\subsection{Method \code{users_id_muting_with_http_info()}}{
Returns User objects that are muted by the provided User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_muting_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get the next 'page' of results.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdMutingResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unblock"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unblock}{}}}
\subsection{Method \code{users_id_unblock()}}{
Unblock User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unblock(
  source_user_id,
  target_user_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unblock the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unblock.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BlockUserMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unblock_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unblock_with_http_info}{}}}
\subsection{Method \code{users_id_unblock_with_http_info()}}{
Unblock User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unblock_with_http_info(
  source_user_id,
  target_user_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unblock the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unblock.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (BlockUserMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unfollow"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unfollow}{}}}
\subsection{Method \code{users_id_unfollow()}}{
Unfollow User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unfollow(
  source_user_id,
  target_user_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unfollow the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unfollow.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
UsersFollowingDeleteResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unfollow_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unfollow_with_http_info}{}}}
\subsection{Method \code{users_id_unfollow_with_http_info()}}{
Unfollow User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unfollow_with_http_info(
  source_user_id,
  target_user_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unfollow the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unfollow.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (UsersFollowingDeleteResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unmute"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unmute}{}}}
\subsection{Method \code{users_id_unmute()}}{
Unmute User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unmute(source_user_id, target_user_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unmute the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unmute.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
MuteUserMutationResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-users_id_unmute_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-users_id_unmute_with_http_info}{}}}
\subsection{Method \code{users_id_unmute_with_http_info()}}{
Unmute User by User ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$users_id_unmute_with_http_info(
  source_user_id,
  target_user_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_user_id}}{The ID of the authenticated source User that is requesting to unmute the target User.}

\item{\code{target_user_id}}{The ID of the User that the source User is requesting to unmute.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (MuteUserMutationResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UsersApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UsersApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UsersApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
