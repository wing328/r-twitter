% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rule_no_id.R
\docType{class}
\name{RuleNoId}
\alias{RuleNoId}
\title{RuleNoId}
\format{
An \code{R6Class} generator object
}
\description{
RuleNoId Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tag}}{character [optional]}

\item{\code{value}}{character}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RuleNoId-new}{\code{RuleNoId$new()}}
\item \href{#method-RuleNoId-toJSON}{\code{RuleNoId$toJSON()}}
\item \href{#method-RuleNoId-fromJSON}{\code{RuleNoId$fromJSON()}}
\item \href{#method-RuleNoId-toJSONString}{\code{RuleNoId$toJSONString()}}
\item \href{#method-RuleNoId-fromJSONString}{\code{RuleNoId$fromJSONString()}}
\item \href{#method-RuleNoId-validateJSON}{\code{RuleNoId$validateJSON()}}
\item \href{#method-RuleNoId-toString}{\code{RuleNoId$toString()}}
\item \href{#method-RuleNoId-isValid}{\code{RuleNoId$isValid()}}
\item \href{#method-RuleNoId-getInvalidFields}{\code{RuleNoId$getInvalidFields()}}
\item \href{#method-RuleNoId-clone}{\code{RuleNoId$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-new"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new RuleNoId class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$new(value, tag = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The filterlang value of the rule.}

\item{\code{tag}}{A tag meant for the labeling of user provided rules.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
RuleNoId in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of RuleNoId
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of RuleNoId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
RuleNoId in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of RuleNoId
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of RuleNoId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to RuleNoId and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-toString"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of RuleNoId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RuleNoId-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RuleNoId-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RuleNoId$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
