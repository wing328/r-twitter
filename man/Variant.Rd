% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/variant.R
\docType{class}
\name{Variant}
\alias{Variant}
\title{Variant}
\format{
An \code{R6Class} generator object
}
\description{
Variant Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{bit_rate}}{integer [optional]}

\item{\code{content_type}}{character [optional]}

\item{\code{url}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Variant-new}{\code{Variant$new()}}
\item \href{#method-Variant-toJSON}{\code{Variant$toJSON()}}
\item \href{#method-Variant-fromJSON}{\code{Variant$fromJSON()}}
\item \href{#method-Variant-toJSONString}{\code{Variant$toJSONString()}}
\item \href{#method-Variant-fromJSONString}{\code{Variant$fromJSONString()}}
\item \href{#method-Variant-validateJSON}{\code{Variant$validateJSON()}}
\item \href{#method-Variant-toString}{\code{Variant$toString()}}
\item \href{#method-Variant-isValid}{\code{Variant$isValid()}}
\item \href{#method-Variant-getInvalidFields}{\code{Variant$getInvalidFields()}}
\item \href{#method-Variant-clone}{\code{Variant$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-new"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Variant class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$new(bit_rate = NULL, content_type = NULL, url = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{bit_rate}}{The bit rate of the media.}

\item{\code{content_type}}{The content type of the media.}

\item{\code{url}}{The url to the media.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Variant in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Variant
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Variant
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Variant in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Variant
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Variant
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Variant and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Variant
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Variant-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Variant-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Variant$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
