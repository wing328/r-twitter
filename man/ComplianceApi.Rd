% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compliance_api.R
\docType{class}
\name{ComplianceApi}
\alias{ComplianceApi}
\title{Compliance operations}
\format{
An \code{R6Class} generator object
}
\description{
twitter.Compliance
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ create_batch_compliance_job } \emph{ Create compliance job }
Creates a compliance for the given job type

\itemize{
\item \emph{ @param } create_compliance_job_request \link{CreateComplianceJobRequest}
\item \emph{ @returnType } \link{CreateComplianceJobResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : CreateComplianceJobResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ get_batch_compliance_job } \emph{ Get Compliance Job }
Returns a single Compliance Job by ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } compliance_job_fields Enum < [created_at, download_expires_at, download_url, id, name, resumable, status, type, upload_expires_at, upload_url] >
\item \emph{ @returnType } \link{Get2ComplianceJobsIdResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2ComplianceJobsIdResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ get_tweets_compliance_stream } \emph{ Tweets Compliance stream }
Streams 100% of compliance data for Tweets

\itemize{
\item \emph{ @param } partition integer
\item \emph{ @param } backfill_minutes integer
\item \emph{ @param } start_time character
\item \emph{ @param } end_time character
\item \emph{ @returnType } \link{TweetComplianceStreamResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : TweetComplianceStreamResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ get_users_compliance_stream } \emph{ Users Compliance stream }
Streams 100% of compliance data for Users

\itemize{
\item \emph{ @param } partition integer
\item \emph{ @param } backfill_minutes integer
\item \emph{ @param } start_time character
\item \emph{ @param } end_time character
\item \emph{ @returnType } \link{UserComplianceStreamResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : UserComplianceStreamResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_batch_compliance_jobs } \emph{ List Compliance Jobs }
Returns recent Compliance Jobs for a given job type and optional job status

\itemize{
\item \emph{ @param } type Enum < [tweets, users] >
\item \emph{ @param } status Enum < [created, in_progress, failed, complete] >
\item \emph{ @param } compliance_job_fields Enum < [created_at, download_expires_at, download_url, id, name, resumable, status, type, upload_expires_at, upload_url] >
\item \emph{ @returnType } \link{Get2ComplianceJobsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2ComplianceJobsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  create_batch_compliance_job  ####################

library(twitter)
var.create_compliance_job_request <- CreateComplianceJobRequest$new() # CreateComplianceJobRequest | 

#Create compliance job
api.instance <- ComplianceApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

result <- tryCatch(
            api.instance$create_batch_compliance_job(var.create_compliance_job_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  get_batch_compliance_job  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the Compliance Job to retrieve.
var.compliance_job_fields <- ["[\"created_at\",\"download_expires_at\",\"download_url\",\"id\",\"name\",\"resumable\",\"status\",\"type\",\"upload_expires_at\",\"upload_url\"]"] # set[character] | A comma separated list of ComplianceJob fields to display.

#Get Compliance Job
api.instance <- ComplianceApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

result <- tryCatch(
            api.instance$get_batch_compliance_job(var.id, compliance_job_fields=var.compliance_job_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  get_tweets_compliance_stream  ####################

library(twitter)
var.partition <- 56 # integer | The partition number.
var.backfill_minutes <- 56 # integer | The number of minutes of backfill requested.
var.start_time <- "2021-02-01T18:40:40.000Z" # character | YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
var.end_time <- "2021-02-14T18:40:40.000Z" # character | YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.

#Tweets Compliance stream
api.instance <- ComplianceApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

result <- tryCatch(
            api.instance$get_tweets_compliance_stream(var.partition, backfill_minutes=var.backfill_minutes, start_time=var.start_time, end_time=var.end_time),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  get_users_compliance_stream  ####################

library(twitter)
var.partition <- 56 # integer | The partition number.
var.backfill_minutes <- 56 # integer | The number of minutes of backfill requested.
var.start_time <- "2021-02-01T18:40:40.000Z" # character | YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
var.end_time <- "2021-02-01T18:40:40.000Z" # character | YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.

#Users Compliance stream
api.instance <- ComplianceApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

result <- tryCatch(
            api.instance$get_users_compliance_stream(var.partition, backfill_minutes=var.backfill_minutes, start_time=var.start_time, end_time=var.end_time),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_batch_compliance_jobs  ####################

library(twitter)
var.type <- "type_example" # character | Type of Compliance Job to list.
var.status <- "status_example" # character | Status of Compliance Job to list.
var.compliance_job_fields <- ["[\"created_at\",\"download_expires_at\",\"download_url\",\"id\",\"name\",\"resumable\",\"status\",\"type\",\"upload_expires_at\",\"upload_url\"]"] # set[character] | A comma separated list of ComplianceJob fields to display.

#List Compliance Jobs
api.instance <- ComplianceApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

result <- tryCatch(
            api.instance$list_batch_compliance_jobs(var.type, status=var.status, compliance_job_fields=var.compliance_job_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ComplianceApi-new}{\code{ComplianceApi$new()}}
\item \href{#method-ComplianceApi-create_batch_compliance_job}{\code{ComplianceApi$create_batch_compliance_job()}}
\item \href{#method-ComplianceApi-create_batch_compliance_job_with_http_info}{\code{ComplianceApi$create_batch_compliance_job_with_http_info()}}
\item \href{#method-ComplianceApi-get_batch_compliance_job}{\code{ComplianceApi$get_batch_compliance_job()}}
\item \href{#method-ComplianceApi-get_batch_compliance_job_with_http_info}{\code{ComplianceApi$get_batch_compliance_job_with_http_info()}}
\item \href{#method-ComplianceApi-get_tweets_compliance_stream}{\code{ComplianceApi$get_tweets_compliance_stream()}}
\item \href{#method-ComplianceApi-get_tweets_compliance_stream_with_http_info}{\code{ComplianceApi$get_tweets_compliance_stream_with_http_info()}}
\item \href{#method-ComplianceApi-get_users_compliance_stream}{\code{ComplianceApi$get_users_compliance_stream()}}
\item \href{#method-ComplianceApi-get_users_compliance_stream_with_http_info}{\code{ComplianceApi$get_users_compliance_stream_with_http_info()}}
\item \href{#method-ComplianceApi-list_batch_compliance_jobs}{\code{ComplianceApi$list_batch_compliance_jobs()}}
\item \href{#method-ComplianceApi-list_batch_compliance_jobs_with_http_info}{\code{ComplianceApi$list_batch_compliance_jobs_with_http_info()}}
\item \href{#method-ComplianceApi-clone}{\code{ComplianceApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ComplianceApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-create_batch_compliance_job"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-create_batch_compliance_job}{}}}
\subsection{Method \code{create_batch_compliance_job()}}{
Create compliance job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$create_batch_compliance_job(
  create_compliance_job_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{create_compliance_job_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CreateComplianceJobResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-create_batch_compliance_job_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-create_batch_compliance_job_with_http_info}{}}}
\subsection{Method \code{create_batch_compliance_job_with_http_info()}}{
Create compliance job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$create_batch_compliance_job_with_http_info(
  create_compliance_job_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{create_compliance_job_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CreateComplianceJobResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_batch_compliance_job"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_batch_compliance_job}{}}}
\subsection{Method \code{get_batch_compliance_job()}}{
Get Compliance Job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_batch_compliance_job(
  id,
  compliance_job_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Compliance Job to retrieve.}

\item{\code{compliance_job_fields}}{(optional) A comma separated list of ComplianceJob fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2ComplianceJobsIdResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_batch_compliance_job_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_batch_compliance_job_with_http_info}{}}}
\subsection{Method \code{get_batch_compliance_job_with_http_info()}}{
Get Compliance Job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_batch_compliance_job_with_http_info(
  id,
  compliance_job_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Compliance Job to retrieve.}

\item{\code{compliance_job_fields}}{(optional) A comma separated list of ComplianceJob fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2ComplianceJobsIdResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_tweets_compliance_stream"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_tweets_compliance_stream}{}}}
\subsection{Method \code{get_tweets_compliance_stream()}}{
Tweets Compliance stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_tweets_compliance_stream(
  partition,
  backfill_minutes = NULL,
  start_time = NULL,
  end_time = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{partition}}{The partition number.}

\item{\code{backfill_minutes}}{(optional) The number of minutes of backfill requested.}

\item{\code{start_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.}

\item{\code{end_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TweetComplianceStreamResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_tweets_compliance_stream_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_tweets_compliance_stream_with_http_info}{}}}
\subsection{Method \code{get_tweets_compliance_stream_with_http_info()}}{
Tweets Compliance stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_tweets_compliance_stream_with_http_info(
  partition,
  backfill_minutes = NULL,
  start_time = NULL,
  end_time = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{partition}}{The partition number.}

\item{\code{backfill_minutes}}{(optional) The number of minutes of backfill requested.}

\item{\code{start_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.}

\item{\code{end_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (TweetComplianceStreamResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_users_compliance_stream"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_users_compliance_stream}{}}}
\subsection{Method \code{get_users_compliance_stream()}}{
Users Compliance stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_users_compliance_stream(
  partition,
  backfill_minutes = NULL,
  start_time = NULL,
  end_time = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{partition}}{The partition number.}

\item{\code{backfill_minutes}}{(optional) The number of minutes of backfill requested.}

\item{\code{start_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.}

\item{\code{end_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
UserComplianceStreamResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-get_users_compliance_stream_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-get_users_compliance_stream_with_http_info}{}}}
\subsection{Method \code{get_users_compliance_stream_with_http_info()}}{
Users Compliance stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$get_users_compliance_stream_with_http_info(
  partition,
  backfill_minutes = NULL,
  start_time = NULL,
  end_time = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{partition}}{The partition number.}

\item{\code{backfill_minutes}}{(optional) The number of minutes of backfill requested.}

\item{\code{start_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.}

\item{\code{end_time}}{(optional) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (UserComplianceStreamResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-list_batch_compliance_jobs"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-list_batch_compliance_jobs}{}}}
\subsection{Method \code{list_batch_compliance_jobs()}}{
List Compliance Jobs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$list_batch_compliance_jobs(
  type,
  status = NULL,
  compliance_job_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Type of Compliance Job to list.}

\item{\code{status}}{(optional) Status of Compliance Job to list.}

\item{\code{compliance_job_fields}}{(optional) A comma separated list of ComplianceJob fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2ComplianceJobsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-list_batch_compliance_jobs_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-list_batch_compliance_jobs_with_http_info}{}}}
\subsection{Method \code{list_batch_compliance_jobs_with_http_info()}}{
List Compliance Jobs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$list_batch_compliance_jobs_with_http_info(
  type,
  status = NULL,
  compliance_job_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Type of Compliance Job to list.}

\item{\code{status}}{(optional) Status of Compliance Job to list.}

\item{\code{compliance_job_fields}}{(optional) A comma separated list of ComplianceJob fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2ComplianceJobsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplianceApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
