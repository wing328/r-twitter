% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spaces_api.R
\docType{class}
\name{SpacesApi}
\alias{SpacesApi}
\title{Spaces operations}
\format{
An \code{R6Class} generator object
}
\description{
twitter.Spaces
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ find_space_by_id } \emph{ Space lookup by Space ID }
Returns a variety of information about the Space specified by the requested ID

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } space_fields Enum < [created_at, creator_id, ended_at, host_ids, id, invited_user_ids, is_ticketed, lang, participant_count, scheduled_start, speaker_ids, started_at, state, subscriber_count, title, topic_ids, updated_at] >
\item \emph{ @param } expansions Enum < [creator_id, host_ids, invited_user_ids, speaker_ids, topic_ids] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } topic_fields Enum < [description, id, name] >
\item \emph{ @returnType } \link{Get2SpacesIdResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesIdResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_spaces_by_creator_ids } \emph{ Space lookup by their creators }
Returns a variety of information about the Spaces created by the provided User IDs

\itemize{
\item \emph{ @param } user_ids list( character )
\item \emph{ @param } space_fields Enum < [created_at, creator_id, ended_at, host_ids, id, invited_user_ids, is_ticketed, lang, participant_count, scheduled_start, speaker_ids, started_at, state, subscriber_count, title, topic_ids, updated_at] >
\item \emph{ @param } expansions Enum < [creator_id, host_ids, invited_user_ids, speaker_ids, topic_ids] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } topic_fields Enum < [description, id, name] >
\item \emph{ @returnType } \link{Get2SpacesByCreatorIdsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesByCreatorIdsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ find_spaces_by_ids } \emph{ Space lookup up Space IDs }
Returns a variety of information about the Spaces specified by the requested IDs

\itemize{
\item \emph{ @param } ids list( character )
\item \emph{ @param } space_fields Enum < [created_at, creator_id, ended_at, host_ids, id, invited_user_ids, is_ticketed, lang, participant_count, scheduled_start, speaker_ids, started_at, state, subscriber_count, title, topic_ids, updated_at] >
\item \emph{ @param } expansions Enum < [creator_id, host_ids, invited_user_ids, speaker_ids, topic_ids] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } topic_fields Enum < [description, id, name] >
\item \emph{ @returnType } \link{Get2SpacesResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ search_spaces } \emph{ Search for Spaces }
Returns Spaces that match the provided query.

\itemize{
\item \emph{ @param } query character
\item \emph{ @param } state Enum < [live, scheduled, all] >
\item \emph{ @param } max_results integer
\item \emph{ @param } space_fields Enum < [created_at, creator_id, ended_at, host_ids, id, invited_user_ids, is_ticketed, lang, participant_count, scheduled_start, speaker_ids, started_at, state, subscriber_count, title, topic_ids, updated_at] >
\item \emph{ @param } expansions Enum < [creator_id, host_ids, invited_user_ids, speaker_ids, topic_ids] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } topic_fields Enum < [description, id, name] >
\item \emph{ @returnType } \link{Get2SpacesSearchResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesSearchResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ space_buyers } \emph{ Retrieve the list of Users who purchased a ticket to the given space }
Retrieves the list of Users who purchased a ticket to the given space

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } pagination_token character
\item \emph{ @param } max_results integer
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } expansions Enum < [pinned_tweet_id] >
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @returnType } \link{Get2SpacesIdBuyersResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesIdBuyersResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ space_tweets } \emph{ Retrieve Tweets from a Space. }
Retrieves Tweets shared in the specified Space.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } tweet_fields Enum < [attachments, author_id, context_annotations, conversation_id, created_at, entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld] >
\item \emph{ @param } expansions Enum < [attachments.media_keys, attachments.poll_ids, author_id, entities.mentions.username, geo.place_id, in_reply_to_user_id, referenced_tweets.id, referenced_tweets.id.author_id] >
\item \emph{ @param } media_fields Enum < [alt_text, duration_ms, height, media_key, non_public_metrics, organic_metrics, preview_image_url, promoted_metrics, public_metrics, type, url, variants, width] >
\item \emph{ @param } poll_fields Enum < [duration_minutes, end_datetime, id, options, voting_status] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @param } place_fields Enum < [contained_within, country, country_code, full_name, geo, id, name, place_type] >
\item \emph{ @returnType } \link{Get2SpacesIdTweetsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2SpacesIdTweetsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  find_space_by_id  ####################

library(twitter)
var.id <- "1YqKDqWqdPLsV" # character | The ID of the Space to be retrieved.
var.space_fields <- ["[\"created_at\",\"creator_id\",\"ended_at\",\"host_ids\",\"id\",\"invited_user_ids\",\"is_ticketed\",\"lang\",\"participant_count\",\"scheduled_start\",\"speaker_ids\",\"started_at\",\"state\",\"subscriber_count\",\"title\",\"topic_ids\",\"updated_at\"]"] # set[character] | A comma separated list of Space fields to display.
var.expansions <- ["[\"creator_id\",\"host_ids\",\"invited_user_ids\",\"speaker_ids\",\"topic_ids\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.topic_fields <- ["[\"description\",\"id\",\"name\"]"] # set[character] | A comma separated list of Topic fields to display.

#Space lookup by Space ID
api.instance <- SpacesApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$find_space_by_id(var.id, space_fields=var.space_fields, expansions=var.expansions, user_fields=var.user_fields, topic_fields=var.topic_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_spaces_by_creator_ids  ####################

library(twitter)
var.user_ids <- ["user_ids_example"] # array[character] | The IDs of Users to search through.
var.space_fields <- ["[\"created_at\",\"creator_id\",\"ended_at\",\"host_ids\",\"id\",\"invited_user_ids\",\"is_ticketed\",\"lang\",\"participant_count\",\"scheduled_start\",\"speaker_ids\",\"started_at\",\"state\",\"subscriber_count\",\"title\",\"topic_ids\",\"updated_at\"]"] # set[character] | A comma separated list of Space fields to display.
var.expansions <- ["[\"creator_id\",\"host_ids\",\"invited_user_ids\",\"speaker_ids\",\"topic_ids\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.topic_fields <- ["[\"description\",\"id\",\"name\"]"] # set[character] | A comma separated list of Topic fields to display.

#Space lookup by their creators
api.instance <- SpacesApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$find_spaces_by_creator_ids(var.user_ids, space_fields=var.space_fields, expansions=var.expansions, user_fields=var.user_fields, topic_fields=var.topic_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  find_spaces_by_ids  ####################

library(twitter)
var.ids <- ["ids_example"] # array[character] | The list of Space IDs to return.
var.space_fields <- ["[\"created_at\",\"creator_id\",\"ended_at\",\"host_ids\",\"id\",\"invited_user_ids\",\"is_ticketed\",\"lang\",\"participant_count\",\"scheduled_start\",\"speaker_ids\",\"started_at\",\"state\",\"subscriber_count\",\"title\",\"topic_ids\",\"updated_at\"]"] # set[character] | A comma separated list of Space fields to display.
var.expansions <- ["[\"creator_id\",\"host_ids\",\"invited_user_ids\",\"speaker_ids\",\"topic_ids\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.topic_fields <- ["[\"description\",\"id\",\"name\"]"] # set[character] | A comma separated list of Topic fields to display.

#Space lookup up Space IDs
api.instance <- SpacesApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$find_spaces_by_ids(var.ids, space_fields=var.space_fields, expansions=var.expansions, user_fields=var.user_fields, topic_fields=var.topic_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  search_spaces  ####################

library(twitter)
var.query <- "crypto" # character | The search query.
var.state <- "all" # character | The state of Spaces to search for.
var.max_results <- 100 # integer | The number of results to return.
var.space_fields <- ["[\"created_at\",\"creator_id\",\"ended_at\",\"host_ids\",\"id\",\"invited_user_ids\",\"is_ticketed\",\"lang\",\"participant_count\",\"scheduled_start\",\"speaker_ids\",\"started_at\",\"state\",\"subscriber_count\",\"title\",\"topic_ids\",\"updated_at\"]"] # set[character] | A comma separated list of Space fields to display.
var.expansions <- ["[\"creator_id\",\"host_ids\",\"invited_user_ids\",\"speaker_ids\",\"topic_ids\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.topic_fields <- ["[\"description\",\"id\",\"name\"]"] # set[character] | A comma separated list of Topic fields to display.

#Search for Spaces
api.instance <- SpacesApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$search_spaces(var.query, state=var.state, max_results=var.max_results, space_fields=var.space_fields, expansions=var.expansions, user_fields=var.user_fields, topic_fields=var.topic_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  space_buyers  ####################

library(twitter)
var.id <- "1YqKDqWqdPLsV" # character | The ID of the Space to be retrieved.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.max_results <- 100 # integer | The maximum number of results.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.expansions <- ["[\"pinned_tweet_id\"]"] # set[character] | A comma separated list of fields to expand.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.

#Retrieve the list of Users who purchased a ticket to the given space
api.instance <- SpacesApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$space_buyers(var.id, pagination_token=var.pagination_token, max_results=var.max_results, user_fields=var.user_fields, expansions=var.expansions, tweet_fields=var.tweet_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  space_tweets  ####################

library(twitter)
var.id <- "1YqKDqWqdPLsV" # character | The ID of the Space to be retrieved.
var.max_results <- 100 # integer | The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
var.tweet_fields <- ["[\"attachments\",\"author_id\",\"context_annotations\",\"conversation_id\",\"created_at\",\"entities\",\"geo\",\"id\",\"in_reply_to_user_id\",\"lang\",\"non_public_metrics\",\"organic_metrics\",\"possibly_sensitive\",\"promoted_metrics\",\"public_metrics\",\"referenced_tweets\",\"reply_settings\",\"source\",\"text\",\"withheld\"]"] # set[character] | A comma separated list of Tweet fields to display.
var.expansions <- ["[\"attachments.media_keys\",\"attachments.poll_ids\",\"author_id\",\"entities.mentions.username\",\"geo.place_id\",\"in_reply_to_user_id\",\"referenced_tweets.id\",\"referenced_tweets.id.author_id\"]"] # set[character] | A comma separated list of fields to expand.
var.media_fields <- ["[\"alt_text\",\"duration_ms\",\"height\",\"media_key\",\"non_public_metrics\",\"organic_metrics\",\"preview_image_url\",\"promoted_metrics\",\"public_metrics\",\"type\",\"url\",\"variants\",\"width\"]"] # set[character] | A comma separated list of Media fields to display.
var.poll_fields <- ["[\"duration_minutes\",\"end_datetime\",\"id\",\"options\",\"voting_status\"]"] # set[character] | A comma separated list of Poll fields to display.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.
var.place_fields <- ["[\"contained_within\",\"country\",\"country_code\",\"full_name\",\"geo\",\"id\",\"name\",\"place_type\"]"] # set[character] | A comma separated list of Place fields to display.

#Retrieve Tweets from a Space.
api.instance <- SpacesApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$space_tweets(var.id, max_results=var.max_results, tweet_fields=var.tweet_fields, expansions=var.expansions, media_fields=var.media_fields, poll_fields=var.poll_fields, user_fields=var.user_fields, place_fields=var.place_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SpacesApi-new}{\code{SpacesApi$new()}}
\item \href{#method-SpacesApi-find_space_by_id}{\code{SpacesApi$find_space_by_id()}}
\item \href{#method-SpacesApi-find_space_by_id_with_http_info}{\code{SpacesApi$find_space_by_id_with_http_info()}}
\item \href{#method-SpacesApi-find_spaces_by_creator_ids}{\code{SpacesApi$find_spaces_by_creator_ids()}}
\item \href{#method-SpacesApi-find_spaces_by_creator_ids_with_http_info}{\code{SpacesApi$find_spaces_by_creator_ids_with_http_info()}}
\item \href{#method-SpacesApi-find_spaces_by_ids}{\code{SpacesApi$find_spaces_by_ids()}}
\item \href{#method-SpacesApi-find_spaces_by_ids_with_http_info}{\code{SpacesApi$find_spaces_by_ids_with_http_info()}}
\item \href{#method-SpacesApi-search_spaces}{\code{SpacesApi$search_spaces()}}
\item \href{#method-SpacesApi-search_spaces_with_http_info}{\code{SpacesApi$search_spaces_with_http_info()}}
\item \href{#method-SpacesApi-space_buyers}{\code{SpacesApi$space_buyers()}}
\item \href{#method-SpacesApi-space_buyers_with_http_info}{\code{SpacesApi$space_buyers_with_http_info()}}
\item \href{#method-SpacesApi-space_tweets}{\code{SpacesApi$space_tweets()}}
\item \href{#method-SpacesApi-space_tweets_with_http_info}{\code{SpacesApi$space_tweets_with_http_info()}}
\item \href{#method-SpacesApi-clone}{\code{SpacesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new SpacesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_space_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_space_by_id}{}}}
\subsection{Method \code{find_space_by_id()}}{
Space lookup by Space ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_space_by_id(
  id,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesIdResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_space_by_id_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_space_by_id_with_http_info}{}}}
\subsection{Method \code{find_space_by_id_with_http_info()}}{
Space lookup by Space ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_space_by_id_with_http_info(
  id,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesIdResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_spaces_by_creator_ids"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_spaces_by_creator_ids}{}}}
\subsection{Method \code{find_spaces_by_creator_ids()}}{
Space lookup by their creators
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_spaces_by_creator_ids(
  user_ids,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_ids}}{The IDs of Users to search through.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesByCreatorIdsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_spaces_by_creator_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_spaces_by_creator_ids_with_http_info}{}}}
\subsection{Method \code{find_spaces_by_creator_ids_with_http_info()}}{
Space lookup by their creators
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_spaces_by_creator_ids_with_http_info(
  user_ids,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_ids}}{The IDs of Users to search through.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesByCreatorIdsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_spaces_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_spaces_by_ids}{}}}
\subsection{Method \code{find_spaces_by_ids()}}{
Space lookup up Space IDs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_spaces_by_ids(
  ids,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ids}}{The list of Space IDs to return.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-find_spaces_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-find_spaces_by_ids_with_http_info}{}}}
\subsection{Method \code{find_spaces_by_ids_with_http_info()}}{
Space lookup up Space IDs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$find_spaces_by_ids_with_http_info(
  ids,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ids}}{The list of Space IDs to return.}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-search_spaces"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-search_spaces}{}}}
\subsection{Method \code{search_spaces()}}{
Search for Spaces
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$search_spaces(
  query,
  state = "all",
  max_results = 100,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{The search query.}

\item{\code{state}}{(optional) The state of Spaces to search for. (default value: "all")}

\item{\code{max_results}}{(optional) The number of results to return. (default value: 100)}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesSearchResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-search_spaces_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-search_spaces_with_http_info}{}}}
\subsection{Method \code{search_spaces_with_http_info()}}{
Search for Spaces
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$search_spaces_with_http_info(
  query,
  state = "all",
  max_results = 100,
  space_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  topic_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{The search query.}

\item{\code{state}}{(optional) The state of Spaces to search for. (default value: "all")}

\item{\code{max_results}}{(optional) The number of results to return. (default value: 100)}

\item{\code{space_fields}}{(optional) A comma separated list of Space fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{topic_fields}}{(optional) A comma separated list of Topic fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesSearchResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-space_buyers"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-space_buyers}{}}}
\subsection{Method \code{space_buyers()}}{
Retrieve the list of Users who purchased a ticket to the given space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$space_buyers(
  id,
  pagination_token = NULL,
  max_results = 100,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesIdBuyersResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-space_buyers_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-space_buyers_with_http_info}{}}}
\subsection{Method \code{space_buyers_with_http_info()}}{
Retrieve the list of Users who purchased a ticket to the given space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$space_buyers_with_http_info(
  id,
  pagination_token = NULL,
  max_results = 100,
  user_fields = NULL,
  expansions = NULL,
  tweet_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesIdBuyersResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-space_tweets"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-space_tweets}{}}}
\subsection{Method \code{space_tweets()}}{
Retrieve Tweets from a Space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$space_tweets(
  id,
  max_results = 100,
  tweet_fields = NULL,
  expansions = NULL,
  media_fields = NULL,
  poll_fields = NULL,
  user_fields = NULL,
  place_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{max_results}}{(optional) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default value: 100)}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{media_fields}}{(optional) A comma separated list of Media fields to display.}

\item{\code{poll_fields}}{(optional) A comma separated list of Poll fields to display.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{place_fields}}{(optional) A comma separated list of Place fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2SpacesIdTweetsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-space_tweets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-space_tweets_with_http_info}{}}}
\subsection{Method \code{space_tweets_with_http_info()}}{
Retrieve Tweets from a Space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$space_tweets_with_http_info(
  id,
  max_results = 100,
  tweet_fields = NULL,
  expansions = NULL,
  media_fields = NULL,
  poll_fields = NULL,
  user_fields = NULL,
  place_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the Space to be retrieved.}

\item{\code{max_results}}{(optional) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default value: 100)}

\item{\code{tweet_fields}}{(optional) A comma separated list of Tweet fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{media_fields}}{(optional) A comma separated list of Media fields to display.}

\item{\code{poll_fields}}{(optional) A comma separated list of Poll fields to display.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{place_fields}}{(optional) A comma separated list of Place fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2SpacesIdTweetsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SpacesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SpacesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SpacesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
