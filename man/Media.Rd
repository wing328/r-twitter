% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/media.R
\docType{class}
\name{Media}
\alias{Media}
\title{Media}
\format{
An \code{R6Class} generator object
}
\description{
Media Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{height}}{integer [optional]}

\item{\code{media_key}}{character [optional]}

\item{\code{type}}{character}

\item{\code{width}}{integer [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Media-new}{\code{Media$new()}}
\item \href{#method-Media-toJSON}{\code{Media$toJSON()}}
\item \href{#method-Media-fromJSON}{\code{Media$fromJSON()}}
\item \href{#method-Media-toJSONString}{\code{Media$toJSONString()}}
\item \href{#method-Media-fromJSONString}{\code{Media$fromJSONString()}}
\item \href{#method-Media-validateJSON}{\code{Media$validateJSON()}}
\item \href{#method-Media-toString}{\code{Media$toString()}}
\item \href{#method-Media-isValid}{\code{Media$isValid()}}
\item \href{#method-Media-getInvalidFields}{\code{Media$getInvalidFields()}}
\item \href{#method-Media-clone}{\code{Media$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-new"></a>}}
\if{latex}{\out{\hypertarget{method-Media-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Media class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$new(type, height = NULL, media_key = NULL, width = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{type}

\item{\code{height}}{The height of the media in pixels.}

\item{\code{media_key}}{The Media Key identifier for this attachment.}

\item{\code{width}}{The width of the media in pixels.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Media-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Media in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Media-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Media
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Media
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Media-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Media in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Media-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Media
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Media
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Media-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Media and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Media-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Media
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Media-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Media-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Media-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Media-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Media$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
