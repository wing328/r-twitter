% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/photo_all_of.R
\docType{class}
\name{PhotoAllOf}
\alias{PhotoAllOf}
\title{PhotoAllOf}
\format{
An \code{R6Class} generator object
}
\description{
PhotoAllOf Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{alt_text}}{character [optional]}

\item{\code{url}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PhotoAllOf-new}{\code{PhotoAllOf$new()}}
\item \href{#method-PhotoAllOf-toJSON}{\code{PhotoAllOf$toJSON()}}
\item \href{#method-PhotoAllOf-fromJSON}{\code{PhotoAllOf$fromJSON()}}
\item \href{#method-PhotoAllOf-toJSONString}{\code{PhotoAllOf$toJSONString()}}
\item \href{#method-PhotoAllOf-fromJSONString}{\code{PhotoAllOf$fromJSONString()}}
\item \href{#method-PhotoAllOf-validateJSON}{\code{PhotoAllOf$validateJSON()}}
\item \href{#method-PhotoAllOf-toString}{\code{PhotoAllOf$toString()}}
\item \href{#method-PhotoAllOf-isValid}{\code{PhotoAllOf$isValid()}}
\item \href{#method-PhotoAllOf-getInvalidFields}{\code{PhotoAllOf$getInvalidFields()}}
\item \href{#method-PhotoAllOf-clone}{\code{PhotoAllOf$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-new"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PhotoAllOf class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$new(alt_text = NULL, url = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{alt_text}}{alt_text}

\item{\code{url}}{url}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PhotoAllOf in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of PhotoAllOf
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PhotoAllOf
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PhotoAllOf in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of PhotoAllOf
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PhotoAllOf
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to PhotoAllOf and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-toString"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of PhotoAllOf
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PhotoAllOf-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PhotoAllOf-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PhotoAllOf$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
