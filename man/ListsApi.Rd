% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lists_api.R
\docType{class}
\name{ListsApi}
\alias{ListsApi}
\title{Lists operations}
\format{
An \code{R6Class} generator object
}
\description{
twitter.Lists
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ get_user_list_memberships } \emph{ Get a User&#39;s List Memberships }
Get a User's List Memberships.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } list_fields Enum < [created_at, description, follower_count, id, member_count, name, owner_id, private] >
\item \emph{ @param } expansions Enum < [owner_id] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdListMembershipsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdListMembershipsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_add_member } \emph{ Add a List member }
Causes a User to become a member of a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_add_user_request \link{ListAddUserRequest}
\item \emph{ @returnType } \link{ListMutateResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListMutateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_id_create } \emph{ Create List }
Creates a new List.

\itemize{
\item \emph{ @param } list_create_request \link{ListCreateRequest}
\item \emph{ @returnType } \link{ListCreateResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListCreateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_id_delete } \emph{ Delete List }
Delete a List that you own.

\itemize{
\item \emph{ @param } id character
\item \emph{ @returnType } \link{ListDeleteResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListDeleteResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_id_get } \emph{ List lookup by List ID. }
Returns a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_fields Enum < [created_at, description, follower_count, id, member_count, name, owner_id, private] >
\item \emph{ @param } expansions Enum < [owner_id] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @returnType } \link{Get2ListsIdResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2ListsIdResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_id_update } \emph{ Update List. }
Update a List that you own.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_update_request \link{ListUpdateRequest}
\item \emph{ @returnType } \link{ListUpdateResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListUpdateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_remove_member } \emph{ Remove a List member }
Causes a User to be removed from the members of a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } user_id character
\item \emph{ @returnType } \link{ListMutateResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListMutateResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_follow } \emph{ Follow a List }
Causes a User to follow a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_followed_request \link{ListFollowedRequest}
\item \emph{ @returnType } \link{ListFollowedResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListFollowedResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_owned_lists } \emph{ Get a User&#39;s Owned Lists. }
Get a User's Owned Lists.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } list_fields Enum < [created_at, description, follower_count, id, member_count, name, owner_id, private] >
\item \emph{ @param } expansions Enum < [owner_id] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdOwnedListsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdOwnedListsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_pin } \emph{ Pin a List }
Causes a User to pin a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_pinned_request \link{ListPinnedRequest}
\item \emph{ @returnType } \link{ListPinnedResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListPinnedResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_pinned_lists } \emph{ Get a User&#39;s Pinned Lists }
Get a User's Pinned Lists.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_fields Enum < [created_at, description, follower_count, id, member_count, name, owner_id, private] >
\item \emph{ @param } expansions Enum < [owner_id] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdPinnedListsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdPinnedListsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_unfollow } \emph{ Unfollow a List }
Causes a User to unfollow a List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_id character
\item \emph{ @returnType } \link{ListFollowedResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListFollowedResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ list_user_unpin } \emph{ Unpin a List }
Causes a User to remove a pinned List.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } list_id character
\item \emph{ @returnType } \link{ListUnpinResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : ListUnpinResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

\strong{ user_followed_lists } \emph{ Get User&#39;s Followed Lists }
Returns a User's followed Lists.

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } max_results integer
\item \emph{ @param } pagination_token character
\item \emph{ @param } list_fields Enum < [created_at, description, follower_count, id, member_count, name, owner_id, private] >
\item \emph{ @param } expansions Enum < [owner_id] >
\item \emph{ @param } user_fields Enum < [created_at, description, entities, id, location, name, pinned_tweet_id, profile_image_url, protected, public_metrics, url, username, verified, withheld] >
\item \emph{ @returnType } \link{Get2UsersIdFollowedListsResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | The request has succeeded.

\item return type : Get2UsersIdFollowedListsResponse
\item response headers :

\tabular{ll}{
}
\item status code : 0 | The request has failed.

\item return type : Error
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  get_user_list_memberships  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.list_fields <- ["[\"created_at\",\"description\",\"follower_count\",\"id\",\"member_count\",\"name\",\"owner_id\",\"private\"]"] # set[character] | A comma separated list of List fields to display.
var.expansions <- ["[\"owner_id\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.

#Get a User's List Memberships
api.instance <- ListsApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$get_user_list_memberships(var.id, max_results=var.max_results, pagination_token=var.pagination_token, list_fields=var.list_fields, expansions=var.expansions, user_fields=var.user_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_add_member  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List for which to add a member.
var.list_add_user_request <- ListAddUserRequest$new() # ListAddUserRequest | 

#Add a List member
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_add_member(var.id, list_add_user_request=var.list_add_user_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_id_create  ####################

library(twitter)
var.list_create_request <- ListCreateRequest$new() # ListCreateRequest | 

#Create List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_id_create(list_create_request=var.list_create_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_id_delete  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List to delete.

#Delete List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_id_delete(var.id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_id_get  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List.
var.list_fields <- ["[\"created_at\",\"description\",\"follower_count\",\"id\",\"member_count\",\"name\",\"owner_id\",\"private\"]"] # set[character] | A comma separated list of List fields to display.
var.expansions <- ["[\"owner_id\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.

#List lookup by List ID.
api.instance <- ListsApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_id_get(var.id, list_fields=var.list_fields, expansions=var.expansions, user_fields=var.user_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_id_update  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List to modify.
var.list_update_request <- ListUpdateRequest$new() # ListUpdateRequest | 

#Update List.
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_id_update(var.id, list_update_request=var.list_update_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_remove_member  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the List to remove a member.
var.user_id <- "user_id_example" # character | The ID of User that will be removed from the List.

#Remove a List member
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_remove_member(var.id, var.user_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_follow  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that will follow the List.
var.list_followed_request <- ListFollowedRequest$new() # ListFollowedRequest | 

#Follow a List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_follow(var.id, list_followed_request=var.list_followed_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_owned_lists  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.list_fields <- ["[\"created_at\",\"description\",\"follower_count\",\"id\",\"member_count\",\"name\",\"owner_id\",\"private\"]"] # set[character] | A comma separated list of List fields to display.
var.expansions <- ["[\"owner_id\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.

#Get a User's Owned Lists.
api.instance <- ListsApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_owned_lists(var.id, max_results=var.max_results, pagination_token=var.pagination_token, list_fields=var.list_fields, expansions=var.expansions, user_fields=var.user_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_pin  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that will pin the List.
var.list_pinned_request <- ListPinnedRequest$new() # ListPinnedRequest | 

#Pin a List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_pin(var.id, var.list_pinned_request),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_pinned_lists  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to return results.
var.list_fields <- ["[\"created_at\",\"description\",\"follower_count\",\"id\",\"member_count\",\"name\",\"owner_id\",\"private\"]"] # set[character] | A comma separated list of List fields to display.
var.expansions <- ["[\"owner_id\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.

#Get a User's Pinned Lists
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_pinned_lists(var.id, list_fields=var.list_fields, expansions=var.expansions, user_fields=var.user_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_unfollow  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User that will unfollow the List.
var.list_id <- "list_id_example" # character | The ID of the List to unfollow.

#Unfollow a List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_unfollow(var.id, var.list_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  list_user_unpin  ####################

library(twitter)
var.id <- "id_example" # character | The ID of the authenticated source User for whom to return results.
var.list_id <- "list_id_example" # character | The ID of the List to unpin.

#Unpin a List
api.instance <- ListsApi$new()

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$list_user_unpin(var.id, var.list_id),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  user_followed_lists  ####################

library(twitter)
var.id <- "2244994945" # character | The ID of the User to lookup.
var.max_results <- 100 # integer | The maximum number of results.
var.pagination_token <- "pagination_token_example" # character | This parameter is used to get a specified 'page' of results.
var.list_fields <- ["[\"created_at\",\"description\",\"follower_count\",\"id\",\"member_count\",\"name\",\"owner_id\",\"private\"]"] # set[character] | A comma separated list of List fields to display.
var.expansions <- ["[\"owner_id\"]"] # set[character] | A comma separated list of fields to expand.
var.user_fields <- ["[\"created_at\",\"description\",\"entities\",\"id\",\"location\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\"protected\",\"public_metrics\",\"url\",\"username\",\"verified\",\"withheld\"]"] # set[character] | A comma separated list of User fields to display.

#Get User's Followed Lists
api.instance <- ListsApi$new()

#Configure HTTP bearer authorization: BearerToken
api.instance$api_client$bearer_token <- 'TODO_YOUR_BEARER_TOKEN';

# Configure OAuth2 access token for authorization: OAuth2UserToken
api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';


result <- tryCatch(
            api.instance$user_followed_lists(var.id, max_results=var.max_results, pagination_token=var.pagination_token, list_fields=var.list_fields, expansions=var.expansions, user_fields=var.user_fields),
            ApiException = function(ex) ex
         )
# In case of error, print the error object
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ListsApi-new}{\code{ListsApi$new()}}
\item \href{#method-ListsApi-get_user_list_memberships}{\code{ListsApi$get_user_list_memberships()}}
\item \href{#method-ListsApi-get_user_list_memberships_with_http_info}{\code{ListsApi$get_user_list_memberships_with_http_info()}}
\item \href{#method-ListsApi-list_add_member}{\code{ListsApi$list_add_member()}}
\item \href{#method-ListsApi-list_add_member_with_http_info}{\code{ListsApi$list_add_member_with_http_info()}}
\item \href{#method-ListsApi-list_id_create}{\code{ListsApi$list_id_create()}}
\item \href{#method-ListsApi-list_id_create_with_http_info}{\code{ListsApi$list_id_create_with_http_info()}}
\item \href{#method-ListsApi-list_id_delete}{\code{ListsApi$list_id_delete()}}
\item \href{#method-ListsApi-list_id_delete_with_http_info}{\code{ListsApi$list_id_delete_with_http_info()}}
\item \href{#method-ListsApi-list_id_get}{\code{ListsApi$list_id_get()}}
\item \href{#method-ListsApi-list_id_get_with_http_info}{\code{ListsApi$list_id_get_with_http_info()}}
\item \href{#method-ListsApi-list_id_update}{\code{ListsApi$list_id_update()}}
\item \href{#method-ListsApi-list_id_update_with_http_info}{\code{ListsApi$list_id_update_with_http_info()}}
\item \href{#method-ListsApi-list_remove_member}{\code{ListsApi$list_remove_member()}}
\item \href{#method-ListsApi-list_remove_member_with_http_info}{\code{ListsApi$list_remove_member_with_http_info()}}
\item \href{#method-ListsApi-list_user_follow}{\code{ListsApi$list_user_follow()}}
\item \href{#method-ListsApi-list_user_follow_with_http_info}{\code{ListsApi$list_user_follow_with_http_info()}}
\item \href{#method-ListsApi-list_user_owned_lists}{\code{ListsApi$list_user_owned_lists()}}
\item \href{#method-ListsApi-list_user_owned_lists_with_http_info}{\code{ListsApi$list_user_owned_lists_with_http_info()}}
\item \href{#method-ListsApi-list_user_pin}{\code{ListsApi$list_user_pin()}}
\item \href{#method-ListsApi-list_user_pin_with_http_info}{\code{ListsApi$list_user_pin_with_http_info()}}
\item \href{#method-ListsApi-list_user_pinned_lists}{\code{ListsApi$list_user_pinned_lists()}}
\item \href{#method-ListsApi-list_user_pinned_lists_with_http_info}{\code{ListsApi$list_user_pinned_lists_with_http_info()}}
\item \href{#method-ListsApi-list_user_unfollow}{\code{ListsApi$list_user_unfollow()}}
\item \href{#method-ListsApi-list_user_unfollow_with_http_info}{\code{ListsApi$list_user_unfollow_with_http_info()}}
\item \href{#method-ListsApi-list_user_unpin}{\code{ListsApi$list_user_unpin()}}
\item \href{#method-ListsApi-list_user_unpin_with_http_info}{\code{ListsApi$list_user_unpin_with_http_info()}}
\item \href{#method-ListsApi-user_followed_lists}{\code{ListsApi$user_followed_lists()}}
\item \href{#method-ListsApi-user_followed_lists_with_http_info}{\code{ListsApi$user_followed_lists_with_http_info()}}
\item \href{#method-ListsApi-clone}{\code{ListsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ListsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-get_user_list_memberships"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-get_user_list_memberships}{}}}
\subsection{Method \code{get_user_list_memberships()}}{
Get a User's List Memberships
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$get_user_list_memberships(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdListMembershipsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-get_user_list_memberships_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-get_user_list_memberships_with_http_info}{}}}
\subsection{Method \code{get_user_list_memberships_with_http_info()}}{
Get a User's List Memberships
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$get_user_list_memberships_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdListMembershipsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_add_member"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_add_member}{}}}
\subsection{Method \code{list_add_member()}}{
Add a List member
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_add_member(
  id,
  list_add_user_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List for which to add a member.}

\item{\code{list_add_user_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListMutateResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_add_member_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_add_member_with_http_info}{}}}
\subsection{Method \code{list_add_member_with_http_info()}}{
Add a List member
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_add_member_with_http_info(
  id,
  list_add_user_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List for which to add a member.}

\item{\code{list_add_user_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListMutateResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_create"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_create}{}}}
\subsection{Method \code{list_id_create()}}{
Create List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_create(list_create_request = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list_create_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListCreateResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_create_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_create_with_http_info}{}}}
\subsection{Method \code{list_id_create_with_http_info()}}{
Create List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_create_with_http_info(
  list_create_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list_create_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListCreateResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_delete"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_delete}{}}}
\subsection{Method \code{list_id_delete()}}{
Delete List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_delete(id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to delete.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListDeleteResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_delete_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_delete_with_http_info}{}}}
\subsection{Method \code{list_id_delete_with_http_info()}}{
Delete List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_delete_with_http_info(id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to delete.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListDeleteResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_get"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_get}{}}}
\subsection{Method \code{list_id_get()}}{
List lookup by List ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_get(
  id,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2ListsIdResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_get_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_get_with_http_info}{}}}
\subsection{Method \code{list_id_get_with_http_info()}}{
List lookup by List ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_get_with_http_info(
  id,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2ListsIdResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_update"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_update}{}}}
\subsection{Method \code{list_id_update()}}{
Update List.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_update(id, list_update_request = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to modify.}

\item{\code{list_update_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListUpdateResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_id_update_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_id_update_with_http_info}{}}}
\subsection{Method \code{list_id_update_with_http_info()}}{
Update List.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_id_update_with_http_info(
  id,
  list_update_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to modify.}

\item{\code{list_update_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListUpdateResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_remove_member"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_remove_member}{}}}
\subsection{Method \code{list_remove_member()}}{
Remove a List member
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_remove_member(id, user_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to remove a member.}

\item{\code{user_id}}{The ID of User that will be removed from the List.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListMutateResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_remove_member_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_remove_member_with_http_info}{}}}
\subsection{Method \code{list_remove_member_with_http_info()}}{
Remove a List member
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_remove_member_with_http_info(id, user_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the List to remove a member.}

\item{\code{user_id}}{The ID of User that will be removed from the List.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListMutateResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_follow"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_follow}{}}}
\subsection{Method \code{list_user_follow()}}{
Follow a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_follow(
  id,
  list_followed_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will follow the List.}

\item{\code{list_followed_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListFollowedResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_follow_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_follow_with_http_info}{}}}
\subsection{Method \code{list_user_follow_with_http_info()}}{
Follow a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_follow_with_http_info(
  id,
  list_followed_request = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will follow the List.}

\item{\code{list_followed_request}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListFollowedResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_owned_lists"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_owned_lists}{}}}
\subsection{Method \code{list_user_owned_lists()}}{
Get a User's Owned Lists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_owned_lists(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdOwnedListsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_owned_lists_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_owned_lists_with_http_info}{}}}
\subsection{Method \code{list_user_owned_lists_with_http_info()}}{
Get a User's Owned Lists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_owned_lists_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdOwnedListsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_pin"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_pin}{}}}
\subsection{Method \code{list_user_pin()}}{
Pin a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_pin(id, list_pinned_request, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will pin the List.}

\item{\code{list_pinned_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListPinnedResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_pin_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_pin_with_http_info}{}}}
\subsection{Method \code{list_user_pin_with_http_info()}}{
Pin a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_pin_with_http_info(
  id,
  list_pinned_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will pin the List.}

\item{\code{list_pinned_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListPinnedResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_pinned_lists"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_pinned_lists}{}}}
\subsection{Method \code{list_user_pinned_lists()}}{
Get a User's Pinned Lists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_pinned_lists(
  id,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdPinnedListsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_pinned_lists_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_pinned_lists_with_http_info}{}}}
\subsection{Method \code{list_user_pinned_lists_with_http_info()}}{
Get a User's Pinned Lists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_pinned_lists_with_http_info(
  id,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdPinnedListsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_unfollow"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_unfollow}{}}}
\subsection{Method \code{list_user_unfollow()}}{
Unfollow a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_unfollow(id, list_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will unfollow the List.}

\item{\code{list_id}}{The ID of the List to unfollow.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListFollowedResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_unfollow_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_unfollow_with_http_info}{}}}
\subsection{Method \code{list_user_unfollow_with_http_info()}}{
Unfollow a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_unfollow_with_http_info(id, list_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User that will unfollow the List.}

\item{\code{list_id}}{The ID of the List to unfollow.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListFollowedResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_unpin"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_unpin}{}}}
\subsection{Method \code{list_user_unpin()}}{
Unpin a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_unpin(id, list_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{list_id}}{The ID of the List to unpin.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListUnpinResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-list_user_unpin_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-list_user_unpin_with_http_info}{}}}
\subsection{Method \code{list_user_unpin_with_http_info()}}{
Unpin a List
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$list_user_unpin_with_http_info(id, list_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the authenticated source User for whom to return results.}

\item{\code{list_id}}{The ID of the List to unpin.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListUnpinResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-user_followed_lists"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-user_followed_lists}{}}}
\subsection{Method \code{user_followed_lists()}}{
Get User's Followed Lists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$user_followed_lists(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Get2UsersIdFollowedListsResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-user_followed_lists_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-user_followed_lists_with_http_info}{}}}
\subsection{Method \code{user_followed_lists_with_http_info()}}{
Get User's Followed Lists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$user_followed_lists_with_http_info(
  id,
  max_results = 100,
  pagination_token = NULL,
  list_fields = NULL,
  expansions = NULL,
  user_fields = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the User to lookup.}

\item{\code{max_results}}{(optional) The maximum number of results. (default value: 100)}

\item{\code{pagination_token}}{(optional) This parameter is used to get a specified 'page' of results.}

\item{\code{list_fields}}{(optional) A comma separated list of List fields to display.}

\item{\code{expansions}}{(optional) A comma separated list of fields to expand.}

\item{\code{user_fields}}{(optional) A comma separated list of User fields to display.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Get2UsersIdFollowedListsResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ListsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ListsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
