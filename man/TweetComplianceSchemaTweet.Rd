% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tweet_compliance_schema_tweet.R
\docType{class}
\name{TweetComplianceSchemaTweet}
\alias{TweetComplianceSchemaTweet}
\title{TweetComplianceSchemaTweet}
\format{
An \code{R6Class} generator object
}
\description{
TweetComplianceSchemaTweet Class
}
\details{
Twitter API v2

Twitter API v2 available endpoints

The version of the OpenAPI document: 2.49
Generated by: https://openapi-generator.tech
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{author_id}}{character}

\item{\code{id}}{character}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TweetComplianceSchemaTweet-new}{\code{TweetComplianceSchemaTweet$new()}}
\item \href{#method-TweetComplianceSchemaTweet-toJSON}{\code{TweetComplianceSchemaTweet$toJSON()}}
\item \href{#method-TweetComplianceSchemaTweet-fromJSON}{\code{TweetComplianceSchemaTweet$fromJSON()}}
\item \href{#method-TweetComplianceSchemaTweet-toJSONString}{\code{TweetComplianceSchemaTweet$toJSONString()}}
\item \href{#method-TweetComplianceSchemaTweet-fromJSONString}{\code{TweetComplianceSchemaTweet$fromJSONString()}}
\item \href{#method-TweetComplianceSchemaTweet-validateJSON}{\code{TweetComplianceSchemaTweet$validateJSON()}}
\item \href{#method-TweetComplianceSchemaTweet-toString}{\code{TweetComplianceSchemaTweet$toString()}}
\item \href{#method-TweetComplianceSchemaTweet-isValid}{\code{TweetComplianceSchemaTweet$isValid()}}
\item \href{#method-TweetComplianceSchemaTweet-getInvalidFields}{\code{TweetComplianceSchemaTweet$getInvalidFields()}}
\item \href{#method-TweetComplianceSchemaTweet-clone}{\code{TweetComplianceSchemaTweet$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-new"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new TweetComplianceSchemaTweet class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$new(author_id, id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{author_id}}{Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.}

\item{\code{id}}{Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TweetComplianceSchemaTweet in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of TweetComplianceSchemaTweet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TweetComplianceSchemaTweet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TweetComplianceSchemaTweet in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of TweetComplianceSchemaTweet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of TweetComplianceSchemaTweet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to TweetComplianceSchemaTweet and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-toString"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of TweetComplianceSchemaTweet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TweetComplianceSchemaTweet-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TweetComplianceSchemaTweet-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TweetComplianceSchemaTweet$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
